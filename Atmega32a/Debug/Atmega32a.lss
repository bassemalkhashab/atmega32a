
Atmega32a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4c  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  0000262c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008aa  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003755  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_1>
   8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_2>
   c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_3>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	a0 01       	movw	r20, r0
  56:	aa 01       	movw	r20, r20
  58:	b4 01       	movw	r22, r8
  5a:	be 01       	movw	r22, r28
  5c:	c8 01       	movw	r24, r16
  5e:	d2 01       	movw	r26, r4
  60:	dc 01       	movw	r26, r24
  62:	e6 01       	movw	r28, r12

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a6 36       	cpi	r26, 0x66	; 102
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  84:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <PWM_init>:


void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	SET_TIMER0_MODE(FAST_PWM);
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	0e 94 57 01 	call	0x2ae	; 0x2ae <SET_TIMER0_MODE>
	SET_WAVE_MODE(NON_INVERTING);
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SET_WAVE_MODE>
	SET_PRESCALLER_MODE(NO_PRESCALLING);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 96 01 	call	0x32c	; 0x32c <SET_PRESCALLER_MODE>
	setPinDirection(PORTB,PIN3,OUTPUT);  /*set OC0 pin as output*/
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 6f 00 	call	0xde	; 0xde <setPinDirection>
  a8:	08 95       	ret

000000aa <main>:

// Main function
int main(void) {
	unsigned char duty;
	
	PWM_init();
  aa:	0e 94 46 00 	call	0x8c	; 0x8c <PWM_init>
	//setPinValue(PORTB,PIN3,HIGH);
	while (1) {
		for(duty=0; duty<255; duty++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <main+0x18>
		{
			OCR0=duty;  /*increase the LED light intensity*/		
  b2:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0xe>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x14>
  be:	00 00       	nop
	unsigned char duty;
	
	PWM_init();
	//setPinValue(PORTB,PIN3,HIGH);
	while (1) {
		for(duty=0; duty<255; duty++)
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	b1 f7       	brne	.-20     	; 0xb2 <main+0x8>
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <main+0x2e>
			OCR0=duty;  /*increase the LED light intensity*/		
			_delay_ms(1);
		}
		for(duty=255; duty>1; duty--)
		{
			OCR0=duty;  /*decrease the LED light intensity*/
  c8:	8c bf       	out	0x3c, r24	; 60
  ca:	ef ec       	ldi	r30, 0xCF	; 207
  cc:	f7 e0       	ldi	r31, 0x07	; 7
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2a>
  d4:	00 00       	nop
		for(duty=0; duty<255; duty++)
		{
			OCR0=duty;  /*increase the LED light intensity*/		
			_delay_ms(1);
		}
		for(duty=255; duty>1; duty--)
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	b0 f7       	brcc	.-20     	; 0xc8 <main+0x1e>
  dc:	e8 cf       	rjmp	.-48     	; 0xae <main+0x4>

000000de <setPinDirection>:
		break;
	}
}

void setPinDirection(DIO_PORT_ID portID, DIO_PIN_ID pin, DIO_DIRECTION dir){
	switch ( portID){
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	01 f1       	breq	.+64     	; 0x122 <setPinDirection+0x44>
  e2:	30 f0       	brcs	.+12     	; 0xf0 <setPinDirection+0x12>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	b1 f1       	breq	.+108    	; 0x154 <setPinDirection+0x76>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	09 f4       	brne	.+2      	; 0xee <setPinDirection+0x10>
  ec:	4c c0       	rjmp	.+152    	; 0x186 <setPinDirection+0xa8>
  ee:	08 95       	ret
		case 0:
			dir ? SETBIT(DDRA, pin) : CLEARBIT(DDRA,pin);
  f0:	44 23       	and	r20, r20
  f2:	59 f0       	breq	.+22     	; 0x10a <setPinDirection+0x2c>
  f4:	2a b3       	in	r18, 0x1a	; 26
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <setPinDirection+0x22>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <setPinDirection+0x1e>
 104:	82 2b       	or	r24, r18
 106:	8a bb       	out	0x1a, r24	; 26
 108:	08 95       	ret
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <setPinDirection+0x38>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <setPinDirection+0x34>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	08 95       	ret
		break;
		case 1:
		dir ? SETBIT(DDRB, pin) : CLEARBIT(DDRB,pin);
 122:	44 23       	and	r20, r20
 124:	59 f0       	breq	.+22     	; 0x13c <setPinDirection+0x5e>
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <setPinDirection+0x54>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <setPinDirection+0x50>
 136:	82 2b       	or	r24, r18
 138:	87 bb       	out	0x17, r24	; 23
 13a:	08 95       	ret
 13c:	27 b3       	in	r18, 0x17	; 23
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <setPinDirection+0x6a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <setPinDirection+0x66>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 152:	08 95       	ret
		break;
		case 2:
		dir ? SETBIT(DDRC, pin) : CLEARBIT(DDRC,pin);
 154:	44 23       	and	r20, r20
 156:	59 f0       	breq	.+22     	; 0x16e <setPinDirection+0x90>
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <setPinDirection+0x86>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <setPinDirection+0x82>
 168:	82 2b       	or	r24, r18
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	08 95       	ret
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <setPinDirection+0x9c>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <setPinDirection+0x98>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
 184:	08 95       	ret
		break;
		case 3:
		dir ? SETBIT(DDRD, pin) : CLEARBIT(DDRD,pin);
 186:	44 23       	and	r20, r20
 188:	59 f0       	breq	.+22     	; 0x1a0 <setPinDirection+0xc2>
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <setPinDirection+0xb8>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <setPinDirection+0xb4>
 19a:	82 2b       	or	r24, r18
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <setPinDirection+0xce>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <setPinDirection+0xca>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	08 95       	ret

000001b8 <__vector_1>:
	CLEARBIT(GICR,INT2);
}


void __vector_1(void) __attribute__((signal,used));
void __vector_1(void){
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	if(FUNC_PTR_INT0 != NULL){
 1da:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <FUNC_PTR_INT0>
 1de:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <FUNC_PTR_INT0+0x1>
 1e2:	30 97       	sbiw	r30, 0x00	; 0
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_1+0x30>
		FUNC_PTR_INT0();
 1e6:	09 95       	icall
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if(FUNC_PTR_INT1 != NULL){
 22c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <FUNC_PTR_INT1>
 230:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <FUNC_PTR_INT1+0x1>
 234:	30 97       	sbiw	r30, 0x00	; 0
 236:	09 f0       	breq	.+2      	; 0x23a <__vector_2+0x30>
		FUNC_PTR_INT1();
 238:	09 95       	icall
	}
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void){
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	if(FUNC_PTR_INT2 != NULL){
 27e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 282:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	09 f0       	breq	.+2      	; 0x28c <__vector_3+0x30>
		FUNC_PTR_INT2();
 28a:	09 95       	icall
	}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <SET_TIMER0_MODE>:
				CLEARBIT(TCCR0,COM00);
				SETBIT(TCCR0,COM01);
			break;
			case SET:
				SETBIT(TCCR0,COM00);
				SETBIT(TCCR0,COM01);
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	a1 f0       	breq	.+40     	; 0x2da <SET_TIMER0_MODE+0x2c>
 2b2:	28 f0       	brcs	.+10     	; 0x2be <SET_TIMER0_MODE+0x10>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	51 f0       	breq	.+20     	; 0x2cc <SET_TIMER0_MODE+0x1e>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	b1 f0       	breq	.+44     	; 0x2e8 <SET_TIMER0_MODE+0x3a>
 2bc:	08 95       	ret
 2be:	83 b7       	in	r24, 0x33	; 51
 2c0:	8f 7b       	andi	r24, 0xBF	; 191
 2c2:	83 bf       	out	0x33, r24	; 51
 2c4:	83 b7       	in	r24, 0x33	; 51
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	83 bf       	out	0x33, r24	; 51
 2ca:	08 95       	ret
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	83 bf       	out	0x33, r24	; 51
 2d2:	83 b7       	in	r24, 0x33	; 51
 2d4:	87 7f       	andi	r24, 0xF7	; 247
 2d6:	83 bf       	out	0x33, r24	; 51
 2d8:	08 95       	ret
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	8f 7b       	andi	r24, 0xBF	; 191
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	83 bf       	out	0x33, r24	; 51
 2e6:	08 95       	ret
 2e8:	83 b7       	in	r24, 0x33	; 51
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	83 bf       	out	0x33, r24	; 51
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	88 60       	ori	r24, 0x08	; 8
 2f2:	83 bf       	out	0x33, r24	; 51
 2f4:	08 95       	ret

000002f6 <SET_WAVE_MODE>:
			break;
		}
}
void SET_WAVE_MODE(WAVE_MODE COM){
	switch(COM){
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	59 f0       	breq	.+22     	; 0x310 <SET_WAVE_MODE+0x1a>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	81 f0       	breq	.+32     	; 0x31e <SET_WAVE_MODE+0x28>
 2fe:	81 11       	cpse	r24, r1
 300:	14 c0       	rjmp	.+40     	; 0x32a <SET_WAVE_MODE+0x34>
		case DISCONNECTED:
			CLEARBIT(TCCR0,COM00);
 302:	83 b7       	in	r24, 0x33	; 51
 304:	8f 7e       	andi	r24, 0xEF	; 239
 306:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,COM01);
 308:	83 b7       	in	r24, 0x33	; 51
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	83 bf       	out	0x33, r24	; 51
		break;
 30e:	08 95       	ret
		case NON_INVERTING:
			CLEARBIT(TCCR0,COM00);
 310:	83 b7       	in	r24, 0x33	; 51
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,COM01);
 316:	83 b7       	in	r24, 0x33	; 51
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	83 bf       	out	0x33, r24	; 51
		break;
 31c:	08 95       	ret
		case INVERTING:
			SETBIT(TCCR0,COM00);
 31e:	83 b7       	in	r24, 0x33	; 51
 320:	80 61       	ori	r24, 0x10	; 16
 322:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,COM01);
 324:	83 b7       	in	r24, 0x33	; 51
 326:	80 62       	ori	r24, 0x20	; 32
 328:	83 bf       	out	0x33, r24	; 51
 32a:	08 95       	ret

0000032c <SET_PRESCALLER_MODE>:
		break;
	}
}
void SET_PRESCALLER_MODE(PRESCALLER_MODE CS){
	switch(CS){
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	88 30       	cpi	r24, 0x08	; 8
 330:	91 05       	cpc	r25, r1
 332:	08 f0       	brcs	.+2      	; 0x336 <SET_PRESCALLER_MODE+0xa>
 334:	54 c0       	rjmp	.+168    	; 0x3de <SET_PRESCALLER_MODE+0xb2>
 336:	fc 01       	movw	r30, r24
 338:	e6 5d       	subi	r30, 0xD6	; 214
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__tablejump2__>
		case STOPPED:
			CLEARBIT(TCCR0,CS00);
 340:	83 b7       	in	r24, 0x33	; 51
 342:	8e 7f       	andi	r24, 0xFE	; 254
 344:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS01);
 346:	83 b7       	in	r24, 0x33	; 51
 348:	8d 7f       	andi	r24, 0xFD	; 253
 34a:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS02);
 34c:	83 b7       	in	r24, 0x33	; 51
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	83 bf       	out	0x33, r24	; 51
		break;
 352:	08 95       	ret
		case NO_PRESCALLING:
			SETBIT(TCCR0,CS00);
 354:	83 b7       	in	r24, 0x33	; 51
 356:	81 60       	ori	r24, 0x01	; 1
 358:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS01);
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	8d 7f       	andi	r24, 0xFD	; 253
 35e:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS02);
 360:	83 b7       	in	r24, 0x33	; 51
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	83 bf       	out	0x33, r24	; 51
		break;
 366:	08 95       	ret
		case CLK_8:
			CLEARBIT(TCCR0,CS00);
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS01);
 36e:	83 b7       	in	r24, 0x33	; 51
 370:	82 60       	ori	r24, 0x02	; 2
 372:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS02);
 374:	83 b7       	in	r24, 0x33	; 51
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	83 bf       	out	0x33, r24	; 51
		break;
 37a:	08 95       	ret
		case CLK_64:
			SETBIT(TCCR0,CS00);
 37c:	83 b7       	in	r24, 0x33	; 51
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS01);
 382:	83 b7       	in	r24, 0x33	; 51
 384:	82 60       	ori	r24, 0x02	; 2
 386:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS02);
 388:	83 b7       	in	r24, 0x33	; 51
 38a:	8b 7f       	andi	r24, 0xFB	; 251
 38c:	83 bf       	out	0x33, r24	; 51
		break;
 38e:	08 95       	ret
		case CLK_256:
			CLEARBIT(TCCR0,CS00);
 390:	83 b7       	in	r24, 0x33	; 51
 392:	8e 7f       	andi	r24, 0xFE	; 254
 394:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS01);
 396:	83 b7       	in	r24, 0x33	; 51
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS02);
 39c:	83 b7       	in	r24, 0x33	; 51
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	83 bf       	out	0x33, r24	; 51
		break;
 3a2:	08 95       	ret
		case CLK_1024:
			SETBIT(TCCR0,CS00);
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	83 bf       	out	0x33, r24	; 51
			CLEARBIT(TCCR0,CS01);
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS02);
 3b0:	83 b7       	in	r24, 0x33	; 51
 3b2:	84 60       	ori	r24, 0x04	; 4
 3b4:	83 bf       	out	0x33, r24	; 51
		break;
 3b6:	08 95       	ret
		case EXT_CLK_FALLING_EDGE:
			CLEARBIT(TCCR0,CS00);
 3b8:	83 b7       	in	r24, 0x33	; 51
 3ba:	8e 7f       	andi	r24, 0xFE	; 254
 3bc:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS01);
 3be:	83 b7       	in	r24, 0x33	; 51
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS02);
 3c4:	83 b7       	in	r24, 0x33	; 51
 3c6:	84 60       	ori	r24, 0x04	; 4
 3c8:	83 bf       	out	0x33, r24	; 51
		break;
 3ca:	08 95       	ret
		case EXT_CLK_RISING_EDGE:
			SETBIT(TCCR0,CS00);
 3cc:	83 b7       	in	r24, 0x33	; 51
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS01);
 3d2:	83 b7       	in	r24, 0x33	; 51
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,CS02);
 3d8:	83 b7       	in	r24, 0x33	; 51
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	83 bf       	out	0x33, r24	; 51
 3de:	08 95       	ret

000003e0 <__tablejump2__>:
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	05 90       	lpm	r0, Z+
 3e6:	f4 91       	lpm	r31, Z
 3e8:	e0 2d       	mov	r30, r0
 3ea:	09 94       	ijmp

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
